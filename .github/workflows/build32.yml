name: llvm x86
on:
  workflow_dispatch:

jobs:
  gnu:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Preparing LFS rootfs and Setting Up the Environment
      run: |
        wget -q https://api.github.com/repos/ywzgt/alfs-sysroot/releases
        URL="$(grep -o 'https://.*-32bit/rootfs.tar.xz' releases | sort -uV | tail -1)"
        wget -nv -c $URL{,.sha256}; rm releases
        sha256sum -c rootfs.tar.xz.sha256
        sudo mkdir -v rootfs
        echo " -> Extracting the 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs
        echo " -> Preparing Virtual Kernel File Systems..."
        sudo mkdir -pv rootfs/{dev,proc,sys,run,tmp}
        sudo mount -v --bind /dev rootfs/dev
        sudo mount -v --bind /dev/pts rootfs/dev/pts
        sudo mount -vt proc proc rootfs/proc
        sudo mount -vt sysfs sysfs rootfs/sys
        sudo mount -vt tmpfs tmpfs rootfs/run
        sudo mount -vt tmpfs tmpfs rootfs/tmp
        if [ -h rootfs/dev/shm ]; then sudo mkdir -pv rootfs/$(readlink rootfs/dev/shm); else sudo mount -vt tmpfs -o nosuid,nodev devshm rootfs/dev/shm; fi
        echo ''
        sudo bash -c "echo -e 'nameserver 1.1.1.1\nnameserver 8.8.8.8' >rootfs/etc/resolv.conf"
        sudo install -do $(id -u) -g $(id -g) rootfs/build
        cp *.sh patch/*.patch rootfs/build

    - name: CMAKE
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash cmake.sh"
    - name: Run script to build llvm
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh"
    - name: Run script to build llvm pass2
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh"
    - name: Run script to strip
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash -e strip.sh DEST"
    - name: Package
      run: V=$(<rootfs/build/VERSION); (cd rootfs/build/DEST; sudo tar cf - .|xz -T0) > llvm-$V.tar.xz; echo "TAG_VERSION=$V.r32" >> $GITHUB_ENV

    - name: Upload to Releases
      if: ${{ env.TAG_VERSION != '' }}
      uses: softprops/action-gh-release@master
      with:
        tag_name: ${{ env.TAG_VERSION }}
        files: llvm-*.tar.xz
        fail_on_unmatched_files: true
        prerelease: true

    - name: Gh login
      if: ${{ failure() }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token; gh auth setup-git; gh auth status
    - name: Setup tmate ssh session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true



  musl:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Preparing LFS rootfs and Setting Up the Environment
      run: |
        wget -q https://api.github.com/repos/ywzgt/alfs-musl/releases
        URL="$(grep -o 'https://.*.r32/rootfs.tar.xz' releases | sort -uV | tail -1)"
        wget -nv -c $URL{,.sha256}; rm releases
        sha256sum -c rootfs.tar.xz.sha256
        sudo mkdir -v rootfs
        echo " -> Extracting the 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs
        echo " -> Preparing Virtual Kernel File Systems..."
        sudo mkdir -pv rootfs/{dev,proc,sys,run,tmp}
        sudo mount -v --bind /dev rootfs/dev
        sudo mount -v --bind /dev/pts rootfs/dev/pts
        sudo mount -vt proc proc rootfs/proc
        sudo mount -vt sysfs sysfs rootfs/sys
        sudo mount -vt tmpfs tmpfs rootfs/run
        sudo mount -vt tmpfs tmpfs rootfs/tmp
        if [ -h rootfs/dev/shm ]; then sudo mkdir -pv rootfs/$(readlink rootfs/dev/shm); else sudo mount -vt tmpfs -o nosuid,nodev devshm rootfs/dev/shm; fi
        echo ''
        sudo bash -c "echo -e 'nameserver 1.1.1.1\nnameserver 8.8.8.8' >rootfs/etc/resolv.conf"
        sudo install -do $(id -u) -g $(id -g) rootfs/build
        cp *.sh patch/*.patch rootfs/build

    - name: CMAKE
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash cmake.sh"
    - name: Run script to build llvm
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh musl"
    - name: Run script to build llvm pass2
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh musl"
    - name: Run script to strip
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash -e strip.sh DEST"
    - name: Package
      run: V=$(<rootfs/build/VERSION); (cd rootfs/build/DEST; sudo tar cf - .|xz -T0) > llvm-musl-$V.tar.xz; echo "TAG_VERSION=$V.r32" >> $GITHUB_ENV

    - name: Upload to Releases
      if: ${{ env.TAG_VERSION != '' }}
      uses: softprops/action-gh-release@master
      with:
        tag_name: ${{ env.TAG_VERSION }}
        files: llvm-*.tar.xz
        fail_on_unmatched_files: true
        prerelease: true

    - name: Gh login
      if: ${{ failure() }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token; gh auth setup-git; gh auth status
    - name: Setup tmate ssh session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true



  uclibc:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Preparing LFS rootfs and Setting Up the Environment
      run: |
        wget -q https://api.github.com/repos/ywzgt/alfs-uclibc/releases
        URL="$(grep -o 'https://.*.r32/rootfs.tar.xz' releases | sort -uV | tail -1)"
        wget -nv -c $URL{,.sha256}; rm releases
        sha256sum -c rootfs.tar.xz.sha256
        sudo mkdir -p rootfs{,32}
        echo " -> Extracting the 32bit 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs32
        TARGET="$(sudo chroot rootfs32 gcc -dumpmachine)"
        sudo mv rootfs{32,/$TARGET}; rm -f rootfs.*xz*
        ln -s rootfs/$TARGET target
        wget -nv https://github.com/ywzgt/alfs-uclibc/releases/latest/download/rootfs.tar.xz{,.sha256}
        sha256sum -c rootfs.tar.xz.sha256; echo " -> Extracting the 64bit 'rootfs.tar.xz'..."
        sudo tar xpf rootfs.tar.xz -C rootfs
        for LFS in rootfs{,/$TARGET}; do
            echo " -> Preparing Virtual Kernel File Systems..."
            sudo mkdir -pv $LFS/{dev,proc,sys,run,tmp}
            sudo mount -v --bind /dev $LFS/dev
            sudo mount -v --bind /dev/pts $LFS/dev/pts
            sudo mount -vt proc proc $LFS/proc
            sudo mount -vt sysfs sysfs $LFS/sys
            sudo mount -vt tmpfs tmpfs $LFS/run
            sudo mount -vt tmpfs tmpfs $LFS/tmp
            if [ -h $LFS/dev/shm ]; then sudo mkdir -pv $LFS/$(readlink $LFS/dev/shm); else sudo mount -vt tmpfs -o nosuid,nodev devshm $LFS/dev/shm; fi
            echo ''; sudo bash -c "echo 'nameserver 1.1.1.1' >$LFS/etc/resolv.conf"
            sudo install -do $(id -u) -g $(id -g) $LFS/build
            cp *.sh patch/*.patch $LFS/build
            cp -r cross.x86 $LFS/build
        done

    - name: CMAKE host
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash cmake.sh"
    - name: CMAKE target
      run: sudo chroot target /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash cmake.sh"
    - name: CROSS toolchain
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build/cross.x86; bash -e binutils && bash -e gcc"
    - name: Run script to cross build llvm
      run: sudo chroot rootfs /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh uclibc cross32"
    - name: Run script to native build llvm
      run: sudo chroot target /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash build.sh uclibc"
    - name: Run script to strip
      run: sudo chroot target /usr/bin/env -i HOME=/root TERM=$TERM PATH=/usr/bin:/usr/sbin /bin/bash --login -c "cd /build; bash -e strip.sh DEST"
    - name: Package
      run: V=$(<target/build/VERSION); (cd target/build/DEST; sudo tar cf - .|xz -T0) > llvm-uclibc-$V.tar.xz; echo "TAG_VERSION=$V.r32" >> $GITHUB_ENV

    - name: Upload to Releases
      if: ${{ env.TAG_VERSION != '' }}
      uses: softprops/action-gh-release@master
      with:
        tag_name: ${{ env.TAG_VERSION }}
        files: llvm-*.tar.xz
        fail_on_unmatched_files: true
        prerelease: true

    - name: Gh login
      if: ${{ failure() }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token; gh auth setup-git; gh auth status
    - name: Setup tmate ssh session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true



  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [gnu, musl, uclibc]
    steps:
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      with:
        keep_latest: 3
        delete_tags: true
        delete_tag_pattern: '.r32'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
